<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rabear&#39;s</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.rabears.com/"/>
  <updated>2017-09-28T04:56:45.900Z</updated>
  <id>https://blog.rabears.com/</id>
  
  <author>
    <name>Jaden Zhuang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java 9 – The Ultimate Feature List</title>
    <link href="https://blog.rabears.com/2017/09/27/java-9-new-feature/"/>
    <id>https://blog.rabears.com/2017/09/27/java-9-new-feature/</id>
    <published>2017-09-27T11:42:01.000Z</published>
    <updated>2017-09-28T04:56:45.900Z</updated>
    
    <content type="html"><![CDATA[<blockquote><footer><strong>Java 9 的发布在历经多次跳票之后，终于正式发布。从这个版本开始，Java 将每半年发布一个版本。 本文翻译自Java 9 Ultimate Feature List, 让我们看看这次发布我们将拥有哪些高级特性。</strong><cite><a href="http://openjdk.java.net/projects/jdk9/" target="_blank" rel="external">openjdk.java.net</a></cite></footer></blockquote><a id="more"></a><p><a href="http://384uqqh5pka2ma24ild282mv.wpengine.netdna-cdn.com/wp-content/uploads/2014/09/Java-9-Telescope.png" target="_blank" rel="external"><img src="http://384uqqh5pka2ma24ild282mv.wpengine.netdna-cdn.com/wp-content/uploads/2014/09/Java-9-Telescope.png" alt="Java 9 Telescope"></a></p><p><strong>This post will be updated with new features targeted at the upcoming Java 9 release</strong> </p><p>The OpenJDK development is picking up speed: after the Java 8 launch in March 2014, we’re expecting to enter a 2 year release cycle. Java 9 will reportedly be released in 2016, and the JEPs (JDK Enhancement Proposals) that target the release keep getting published. Moreover, some JSRs (Java Specification Requests) are already being worked on and we’ve also added a hint of other features that might be included.</p><p>The flagship features are the Jigsaw project, significant performance improvements and long awaited APIs including: Process API updates, JSON as part of java.util and a money handling API. For those of you who want to be on the bleeding edge, JDK 9 early access builds are already available <a href="https://jdk9.java.net/" target="_blank" rel="external">here</a>.</p><p>In this post we’ll keep updating around the main new features for Java 9 and what they’re all about. So stay tuned for additional updates!</p><h2 id="Table-of-contents"><a href="#Table-of-contents" class="headerlink" title="Table of contents"></a>Table of contents</h2><p><span style="color: #339966;"><span style="color: #000000;">1.</span> [Accepted]</span> <a href="#jigsaw">Project Jigsaw – Modular Source Code</a><br><span style="color: #339966;"><span style="color: #000000;">2.</span> [Accepted]</span> <a href="#processapi">Process API Updates</a><br><span style="color: #339966;"><span style="color: #000000;">3.</span> [Accepted]</span> <a href="#jsonapi">Light Weight JSON API</a><br><span style="color: #339966;"><span style="color: #000000;">4.</span> [Accepted]</span> <a href="#moneyapi">Money and Currency API</a><br><span style="color: #339966;"><span style="color: #000000;">5.</span> [Accepted]</span> <a href="#locking">Improved Contended Locking</a><br><span style="color: #339966;"><span style="color: #000000;">6.</span> [Accepted] </span><a href="#codecache">Segmented Code Cache</a><br><span style="color: #339966;"><span style="color: #000000;">7.</span> [Accepted] </span><a href="#sjavac">Smart Java Compilation – Phase Two</a><br><span style="color: #339966;"><span style="color: #ff9900;"><span style="color: #000000;">8.</span> [Expected]</span> </span><a href="#http2">HTTP 2 Client</a><br><span style="color: #ff9900;"><span style="color: #000000;">9.</span> [</span><span style="color: #ff9900;">Expected</span><span style="color: #ff9900;">] </span><a href="#repl">REPL in Java</a></p><h3 id="Update-20-11-2014"><a href="#Update-20-11-2014" class="headerlink" title="Update 20/11/2014:"></a>Update 20/11/2014:</h3><p><span style="color: #339966;"><span style="color: #000000;">10.</span> [Accepted]</span> <a href="#unifiedlogging">Unified JVM Logging</a><br><span style="color: #339966;"><span style="color: #000000;">11.</span> [Accepted]</span> <a href="#compilercontrol">Compiler Control</a><br><span style="color: #339966;"><span style="color: #000000;">12.</span> [Accepted]</span> <a href="#dtls">Datagram Transport Layer Security (DTLS)</a><br><span style="color: #339966;"><span style="color: #000000;">13.</span> [Accepted]</span> <a href="#javadoc">HTML5 Javadoc</a></p><h3 id="Additional-fixes-cleanup"><a href="#Additional-fixes-cleanup" class="headerlink" title="Additional fixes / cleanup:"></a>Additional fixes / cleanup:</h3><p><span style="color: #339966;"><span style="color: #000000;">14.</span> [Accepted]</span> <a href="#elideimport">Elide Deprecation Warnings on Import Statements</a><br><span style="color: #339966;"><span style="color: #000000;">15.</span> [Accepted]</span> <a href="#doclint">Resolve Lint and Doclint Warnings</a><br><span style="color: #339966;"><span style="color: #000000;">16.</span> [Accepted]</span> <a href="#millingcoin">Milling Project Coin</a><br><span style="color: #339966;"><span style="color: #000000;">17.</span> [Accepted]</span> <a href="#removegc">Remove GC Combinations Deprecated in JDK 8</a><br><span style="color: #339966;"><span style="color: #000000;">18.</span> [Accepted]</span> <a href="#processimport">Process Import Statements Correctly</a><br><span style="color: #000000;">19.</span> <a href="#newfeatures">Where do new features come from?</a></p><h2 id="Accepted-features"><a href="#Accepted-features" class="headerlink" title="Accepted features"></a>Accepted features</h2><p><a name="jigsaw"></a></p><h3 id="1-Project-Jigsaw-–-Modular-Source-Code"><a href="#1-Project-Jigsaw-–-Modular-Source-Code" class="headerlink" title="1. Project Jigsaw – Modular Source Code"></a>1. Project Jigsaw – Modular Source Code</h3><p><a href="http://openjdk.java.net/projects/jigsaw/" title="Project Jigsaw" target="_blank" rel="external">Project Jigsaw</a>’s goal is to make Java modular and break the <a href="http://www.oracle.com/technetwork/java/javase/tech/index.html" target="_blank" rel="external">JRE</a> to interoperable components, one of the most hyped features for Java 9. This JEP is the first out of <a href="http://mail.openjdk.java.net/pipermail/jigsaw-dev/2014-July/003417.html" target="_blank" rel="external">4 steps</a> towards Jigsaw and will not change the actual structure of the JRE and JDK. The purpose of this step is to reorganize the JDK source code into modules, enhance the build system to compile modules, and enforce module boundaries at build time. The project was originally intended for Java 8 but was delayed since and retargeted at Java 9.<br>Jigsaw项目是为了模块化Java代码、将JRE分成可相互协作的组件，这也是Java 9 众多特色种的一个。JEP是迈向Jigsaw四步中的第一步，它不会改变JRE和JDK的真实结构。JEP是为了模块化JDK源代码，让编译系统能够模块编译并在构建时检查模块边界。这个项目原本是随Java 8发布的，但由于推迟，所以将把它加到Java 9.</p><p>Once it’s finished, it would allow creating a scaled down runtime Jar (rt.jar) customised to the components a project actually needs. The JDK 7 and JDK 8 rt.jar’s have about 20,000 classes that are part of the JDK even if many of them aren’t really being used in a specific envrionment (although a partial solution is included in the Java 8 <a href="http://www.oracle.com/technetwork/java/embedded/resources/tech/compact-profiles-overview-2157132.html" title="Java 8 Compact Features" target="_blank" rel="external">compact profiles</a> feature). The motivation behind this is to make Java easily scalable to small computing devices (Internet of Things), improve security and performance, and make it easier for developers to construct and maintain libraries.<br>一旦它完成，它可能允许根据一个项目需求自定义组件从而减少rt.jar的大小。在JDK 7 和JDK 8的rt.jar包中有大约20,000个类，但有很多类在一些特定的环境里面并没有被用到(即使在Java 8的紧凑分布特性中已经包含了一部分解决方法也存在着类冗余)。这么做是为了能让Java能够容易应用到小型计算设备(比如网络设备)中，提高它的安全和性能，同时也能让开发者更容易构建和维护这些类库。</p><p><a href="http://openjdk.java.net/jeps/201" title="JEP 201" target="_blank" rel="external">More about JEP 201</a></p><p><a name="processapi"></a></p><h3 id="2-Process-API-Updates"><a href="#2-Process-API-Updates" class="headerlink" title="2. Process API Updates"></a>2. Process API Updates</h3><p>So far there has been a limited ability for controlling and managing operating system processes with Java. For example, in order to do something as simple as get your process PID today, you would need to either access native code or use some sort of a workaround. More than that, it would require a different implementation for each platform to guarantee you’re getting the right result.<br>截止到目前，Java控制与管理系统进程的能力是有限的。举个例子，现在为了简便获取你程序的进程PID，你要么调用本地程序要么要自己使用一些变通方案。更多的是，每个（系统）平台需要有一个不同实现来确保你能获得正确的结果。<br>In Java 9, expect the code for retrieving Linux PIDs, that now looks like this:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span></div><div class="line"><span class="function"></span>&#123;</div><div class="line">    Process proc = Runtime.getRuntime().exec(<span class="keyword">new</span> String[]&#123; <span class="string">"/bin/sh"</span>, <span class="string">"-c"</span>, <span class="string">"echo $PPID"</span> &#125;);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (proc.waitFor() == <span class="number">0</span>)</div><div class="line">    &#123;</div><div class="line">        InputStream in = proc.getInputStream();</div><div class="line">        <span class="keyword">int</span> available = in.available();</div><div class="line">        <span class="keyword">byte</span>[] outputBytes = <span class="keyword">new</span> <span class="keyword">byte</span>[available];</div><div class="line"></div><div class="line">    in.read(outputBytes);</div><div class="line">    String pid = <span class="keyword">new</span> String(outputBytes);</div><div class="line"></div><div class="line">    System.out.println(<span class="string">"Your pid is "</span> + pid);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">    </div></pre></td></tr></table></figure><p>To turn into something like this (that also supports all operating systems):<br>  <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">System.out.println(<span class="string">"Your pid is "</span> + Process.getCurrentPid());</div><div class="line"> </div></pre></td></tr></table></figure></p><p>The update will extend Java’s ability to to interact with the operating system: New direct methods to handle PIDs, process names and states, and ability to enumerate JVMs and processes and more.<br>这次更新将会扩展Java与操作系统的交互能力：新增一些新的直接明了的方法去处理PIDs，进程名字和状态以及枚举多个JVM和进程以及更多事情。</p><p><a href="http://openjdk.java.net/jeps/102" title="JEP 102" target="_blank" rel="external">More about JEP 102</a><br><a name="jsonapi"></a></p><h3 id="3-Light-Weight-JSON-API"><a href="#3-Light-Weight-JSON-API" class="headerlink" title="3. Light-Weight JSON API"></a>3. Light-Weight JSON API</h3><p>Currently there are alternatives available for handling JSON in Java, what’s unique about this API is that it would be part of the language, lightweight and would use the new capabilities of Java 8. And will be delivered right through java.util (Unlike <a href="https://jsonp.java.net/" title="JSONP" target="_blank" rel="external">JSR 353</a> which uses an external package or other <a href="https://code.google.com/p/google-gson/" title="google-gson" target="_blank" rel="external">alternatives</a>).</p><p>目前有多种处理JSON的Java工具，但JSON API 独到之处在于JSON API将作为Java语言的一部分，轻量并且运用Java 8的新特性。它将放在java.util包里一起发布(但在JSR 353里面的JSON是用第三方包或者其他的方法处理的).<br>** Code samples coming soon!</p><p><a href="http://openjdk.java.net/jeps/198" title="JEP 198" target="_blank" rel="external">More about JEP 198</a><br><a name="moneyapi"></a></p><h3 id="4-Money-and-Currency-API"><a href="#4-Money-and-Currency-API" class="headerlink" title="4. Money and Currency API"></a>4. Money and Currency API</h3><p>After the new <a href="http://blog.takipi.com/5-features-in-java-8-that-will-change-how-you-code/#datetime" title="Date and Time API" target="_blank" rel="external">Date and Time API</a> introduced in Java 8, Java 9 brings with it a new and official API for representing, transporting, and performing comprehensive calculations with Money and Currency. To find out more about the project, you can visit JavaMoney on Github. Code and usage examples are already available right here . Here are a few highlights:<br>在Java 8引进了日期和时间的API之后, Java 9引入了新的货币API, 用以表示货币, 支持币种之间的转换和各种复杂运算. 关于这个项目的具体情况, 请访问<a href="https://github.com/JavaMoney,里面已经给出了使用说明和示例" target="_blank" rel="external">https://github.com/JavaMoney,里面已经给出了使用说明和示例</a>, 以下是几个重要的例子:<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Money amt1 = Money.of(<span class="number">10.1234556123456789</span>, <span class="string">"USD"</span>); <span class="comment">// Money is a BigDecimal</span></div><div class="line">FastMoney amt2 = FastMoney.of(<span class="number">123456789</span>, <span class="string">"USD"</span>); <span class="comment">// FastMoney is up to 5 decimal places</span></div><div class="line">Money total = amt1.add(amt2);      </div><div class="line">   </div></pre></td></tr></table></figure></p><p><em>The new money types: Money &amp; FastMoney</em></p> <figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MonetaryAmountFormat germanFormat = MonetaryFormats.getAmountFormat( Locale.GERMANY);</div><div class="line">System.out.println(germanFormat.format(monetaryAmount)); <span class="comment">// 1.202,12 USD</span></div><div class="line">   </div></pre></td></tr></table></figure><p><em>Formatting money according to different countries</em></p><p><a href="https://jcp.org/en/jsr/detail?id=354" title="JSR 354" target="_blank" rel="external">More about JSR 354</a><br><a name="locking"></a></p><h3 id="5-Improve-Contended-Locking"><a href="#5-Improve-Contended-Locking" class="headerlink" title="5. Improve Contended Locking"></a>5. Improve Contended Locking</h3><p>Lock contention is a performance bottleneck for many multithreaded Java applications. The enhancement proposal looks into improving the performance of Java object monitors as measured by different benchmarks. One of the these tests is <a href="http://www.volano.com/benchmarks.html" title="Volano" target="_blank" rel="external">Volano</a>. It simulates a chat server with huge thread counts and client connections, many of them trying to access the same resources and simulate a heavy duty real world application.</p><p>These kind of stress tests push JVMs to the limit and try to determine the maximum throughput they can achieve, usually in terms of messages per second. The ambitious success metric for this JEP is a significant improvement over 22 different benchmarks. If the effort will succeed, these performance improvements will be rolling out in Java 9.</p><p>锁争用是限制许多Java多线程应用性能的瓶颈. 新的机制在改善Java对象监视器的性能方面已经得到了多种基准(benchmark)的验证, 其中包括Volano. 测试中通讯服务器开放了海量的进程来连接客户端, 其中有很多连接都申请同一个资源, 以此模拟重负荷日常应用.</p><p>通过诸如此类的压力测试我们可以估算JVM的极限吞吐量(每秒的消息数量). JEP在22种不同的测试中都得到了出色的成绩, 新的机制如果能在Java 9中得到应用的话, 应用程序的性能将会大大提升.<br><a href="http://openjdk.java.net/jeps/143" title="JEP 143" target="_blank" rel="external">More about JEP 143</a><br><a name="codecache"></a></p><h3 id="6-Segmented-Code-Cache"><a href="#6-Segmented-Code-Cache" class="headerlink" title="6. Segmented Code Cache"></a>6. Segmented Code Cache</h3><p>Another performance improvement for Java 9 is coming from the JIT compiler angle. When certain areas of code are executed rapidly, the VM compiles them to native code and stores them in the code cache. This update looks into segmenting the code cache to different areas of compiled code in order to improve the compiler’s performance.</p><p>Instead of a single area, the code cache will be segmented into 3 by the code’s lifetime in the cache:<br>– Code that will stay in the cache forever (JVM internal / non-method code)<br>– Short lifetime (Profiled code, specific to a certain set of conditions)<br>– Potentially long lifetime (Non-profiled code)<br>The segmentation would allow for several performance improvements to happen. For example, the method sweeper would be able to skip non-method code and act faster.</p><p>Java 9的另一个性能提升来自于JIT(Just-in-time)编译器. 当某段代码被大量重复执行的时候, 虚拟机会把这段代码编译成机器码(native code)并储存在代码缓存里面, 进而通过访问缓存中不同分段的代码来提升编译器的效率.</p><p>和原来的单一缓存区域不同的是, 新的代码缓存根据代码自身的生命周期而分为三种:</p><ul><li>永驻代码(JVM 内置 / 非方法代码)</li><li>短期代码(仅在某些条件下适用的配置性(profiled)代码)</li><li>长期代码(非配置性代码)</li></ul><p>缓存分段会在各个方面提升程序的性能, 比如做垃圾回收扫描的时候可以直接跳过非方法代码(永驻代码), 从而提升效率.</p><p><a href="http://openjdk.java.net/jeps/197" title="JEP 197" target="_blank" rel="external">More about JEP 197</a><br><a name="sjavac"></a></p><h3 id="7-Smart-Java-Compilation-Phase-Two"><a href="#7-Smart-Java-Compilation-Phase-Two" class="headerlink" title="7. Smart Java Compilation, Phase Two"></a>7. Smart Java Compilation, Phase Two</h3><p>The Smart Java Compilation tool, or sjavac, was first worked on around <a href="http://openjdk.java.net/jeps/139" title="JEP 139" target="_blank" rel="external">JEP 139</a> in order to improve JDK build speeds by having the javac compiler run on all cores. With JEP 199, it enters Phase Two, where it will be improved and generalized so that it can be used by default and build other projects than the JDK.</p><p>智能Java编译工具sjavac的第一阶段开始于JEP 139这个项目, 用于在多核处理器上提升JDK的编译速度. 现在这个项目已经进入第二阶段(JEP 199), 目的是改进sjavac并让其成为取代目前JDK编译工具javac的Java默认的通用编译工具.<br><a href="http://openjdk.java.net/jeps/199" title="JEP 199" target="_blank" rel="external">More about JEP 199</a></p><h2 id="What-else-to-expect"><a href="#What-else-to-expect" class="headerlink" title="What else to expect?"></a>What else to expect?</h2><p><a name="http2"></a></p><h3 id="8-HTTP-2-Client"><a href="#8-HTTP-2-Client" class="headerlink" title="8. HTTP 2 Client"></a>8. HTTP 2 Client</h3><p>HTTP 2.0 hasn’t been released yet as a standard but it will be submitted for final review soon and it’s expected to be finalized before the release of Java 9. JEP 110 will define and implement a new HTTP client for Java that will replace HttpURLConnection, and also implement HTTP 2.0 and websockets. It wasn’t published as an accepted JEP yet but its targeting Java 9 and we expect it to be included.</p><p>The official HTTP 2.0 RFC release date is currently set to February 2015, building on top of Google’s SPDY algorithm. SPDY has already shown great speed improvements over HTTP 1.1 ranging between 11.81% to 47.7% and its implementation already exists in most modern browsers.</p><p>HTTP 2.0标准虽然还没正式发布, 但是已经进入了最终审查阶段, 预计可以在Java 9发布之前审查完毕. JEP 110将会重新定义并实现一个全新的Java HTTP客户端, 用来取代现在的HttpURLConnection, 同时也会实现HTTP 2.0和网络接口(原文websockets). 它现在还没被JEP正式认可但我们希望在Java 9中包含这一项目的内容.</p><p>官方的HTTP 2.0 RFC(Request for Comments, 官方技术讨论/会议记录等等的一系列文档记录)预订于2015年2月发布, 它是基于Google发布的SPDY(Speedy, 快速的)协议. 基于SPDY协议的网络相对于基于HTTP 1.1协议的网络有11.81%到47.7%之间的显著提速, 现在已经有浏览器实现了这个协议.<br><a href="http://openjdk.java.net/jeps/110" title="JEP 110" target="_blank" rel="external">More about JEP 110</a><br><a name="repl"></a></p><h3 id="9-Project-Kulla-–-REPL-in-Java"><a href="#9-Project-Kulla-–-REPL-in-Java" class="headerlink" title="9. Project Kulla – REPL in Java"></a>9. Project Kulla – REPL in Java</h3><p>Recently announced, a bit unlikely to hit Java 9 but might make it on time with a targeted integration date set in April 2015. Today there’s no “native” Java way to REPL (Read-Eval-Print-Loop). Meaning, if you want to run a few lines of Java to check out them quickly on their own you will have to wrap it all in a separate project or method. There are REPL add-ons to popular IDEs and some other solutions like Java REPL, but no official way to do this so far – Project Kulla might be the answer.</p><p>这个取名为Kulla的项目最近宣布将于2015年4月整合测试, 虽然已经不太有希望能赶上Java 9的发布, 但如果进度快的话或许刚好能赶上. 现在Java并没有来自官方的REPL(Read-Eval-Print-Loop)方式, 也就是说现在如果你想要跑几行Java代码做一个快速的测试, 你仍然需要把这几行代码封装在项目或者方法里面. 虽然在一些流行的IDE里面有Java REPL工具, 但它们并没有官方支持, 而Kulla项目或许就能成为Java官方发布的REPL解决方案.<br><a href="http://mail.openjdk.java.net/pipermail/announce/2014-August/000181.html" title="Project Kulla" target="_blank" rel="external">More about Project Kulla</a></p><p><a name="unifiedlogging"></a></p><h3 id="10-Unified-JVM-Logging"><a href="#10-Unified-JVM-Logging" class="headerlink" title="10. Unified JVM Logging"></a>10. Unified JVM Logging</h3><p>Today it’s hard to make sense of the root cause for performance issues and crashes of the JVM. One way to tackle this is introducing one single system for all JVM components that would allow fine-grained, and easy-to-configure JVM logging. Currently, different components of the JVM use different mechanisms and conventions for logging, making it harder to debug.</p><p><a href="http://openjdk.java.net/jeps/158" target="_blank" rel="external">More about JEP 158</a><br><a name="compilercontrol"></a></p><h3 id="11-Compiler-Control"><a href="#11-Compiler-Control" class="headerlink" title="11. Compiler Control"></a>11. Compiler Control</h3><p>Taking on the HotSpot JVM and extending the controls for compiler options down to the method level. After this update, the JIT compiler options could be modified even during runtime depending on the specific method that’s being compiled.</p><p><a href="http://openjdk.java.net/jeps/165" target="_blank" rel="external">More about JEP 165</a><br><a name="dtls"></a></p><h3 id="12-Datagram-Transport-Layer-Security-DTLS"><a href="#12-Datagram-Transport-Layer-Security-DTLS" class="headerlink" title="12. Datagram Transport Layer Security (DTLS)"></a>12. Datagram Transport Layer Security (DTLS)</h3><p>Adding DTLS support, a secure way to communicate using datagram protocols such as UDP.</p><p><a href="http://openjdk.java.net/jeps/219" target="_blank" rel="external">More about JEP 219</a><br><a name="javadoc"></a></p><h3 id="13-HTML5-Javadoc"><a href="#13-HTML5-Javadoc" class="headerlink" title="13. HTML5 Javadoc"></a>13. HTML5 Javadoc</h3><p>Bringing Javadoc up to speed with the HTML standard: Generating modern HTML5 documentation.</p><p><a href="http://openjdk.java.net/jeps/224" target="_blank" rel="external">More about JEP 224</a></p><h2 id="Fixes-Cleanup"><a href="#Fixes-Cleanup" class="headerlink" title="Fixes / Cleanup:"></a><strong>Fixes / Cleanup:</strong></h2><p><a name="elideimport"></a></p><h3 id="14-Elide-Deprecation-Warnings-on-Import-Statements"><a href="#14-Elide-Deprecation-Warnings-on-Import-Statements" class="headerlink" title="14. Elide Deprecation Warnings on Import Statements"></a>14. Elide Deprecation Warnings on Import Statements</h3><p><a href="http://openjdk.java.net/jeps/211" target="_blank" rel="external">More about JEP 211</a><br><a name="doclint"></a></p><h3 id="15-Resolve-Lint-and-Doclint-Warnings"><a href="#15-Resolve-Lint-and-Doclint-Warnings" class="headerlink" title="15. Resolve Lint and Doclint Warnings"></a>15. Resolve Lint and Doclint Warnings</h3><p><a href="http://openjdk.java.net/jeps/212" target="_blank" rel="external">More about JEP 212</a><br><a name="millingcoin"></a></p><h3 id="16-Milling-Project-Coin"><a href="#16-Milling-Project-Coin" class="headerlink" title="16. Milling Project Coin"></a>16. Milling Project Coin</h3><p><a href="http://openjdk.java.net/jeps/213" target="_blank" rel="external">More about JEP 213</a><br><a name="removegc"></a></p><h3 id="17-Remove-GC-Combinations-Deprecated-in-JDK-8"><a href="#17-Remove-GC-Combinations-Deprecated-in-JDK-8" class="headerlink" title="17. Remove GC Combinations Deprecated in JDK 8"></a>17. Remove GC Combinations Deprecated in JDK 8</h3><p><a href="http://openjdk.java.net/jeps/214" target="_blank" rel="external">More about JEP 214</a><br><a name="processimport"></a></p><h3 id="18-Process-Import-Statements-Correctly"><a href="#18-Process-Import-Statements-Correctly" class="headerlink" title="18. Process Import Statements Correctly"></a>18. Process Import Statements Correctly</h3><p><a href="http://openjdk.java.net/jeps/216" target="_blank" rel="external">More about JEP 216</a><br><a name="newfeatures"></a></p><h2 id="19-Bonus-Where-do-new-features-come-from"><a href="#19-Bonus-Where-do-new-features-come-from" class="headerlink" title="19. Bonus: Where do new features come from?"></a>19. Bonus: Where do new features come from?</h2><p>JEPs and JSRs don’t usually pop out of nowhere, here’s the structure that holds it all together:</p><p><strong>Groups</strong> – Individuals and organisations with a mutual interest around a broad subject or a specific body of code. Some examples are Security, Networking, Swing, and HotSpot.</p><p><strong>Projects</strong> – Efforts to produce a body of code, documentation or other effort. Must be sponsored by at least one group. Recent examples are Project Lambda, Project Jigsaw, and Project Sumatra.</p><p><strong>JDK Enhancement Proposal</strong> (<a href="http://openjdk.java.net/jeps/0" target="_blank" rel="external">JEP</a>) – Allows promoting a new specification informally before or in parallel to the JCP, when further exploration is needed. Accepted JEPs become a part of the JDK roadmap and assigned a version number.</p><p><strong>Java Specification Request</strong> (<a href="https://jcp.org/en/jsr/all" target="_blank" rel="external">JSR</a>) – The actual specification of the feature happens in this stage, can be either coming through Groups/Projects, JEPs or from individual JCP (Java Community Process) members. An umbrella JSR is usually opened for each Java version, this has yet to happen with Java 9. Individual members of the community can also propose new Java specification requests.</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;footer&gt;&lt;strong&gt;Java 9 的发布在历经多次跳票之后，终于正式发布。从这个版本开始，Java 将每半年发布一个版本。 本文翻译自Java 9 Ultimate Feature List, 让我们看看这次发布我们将拥有哪些高级特性。&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;http://openjdk.java.net/projects/jdk9/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;openjdk.java.net&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Translation" scheme="https://blog.rabears.com/categories/Translation/"/>
    
      <category term="Java" scheme="https://blog.rabears.com/categories/Translation/Java/"/>
    
    
      <category term="Java 9" scheme="https://blog.rabears.com/tags/Java-9/"/>
    
      <category term="新特性" scheme="https://blog.rabears.com/tags/%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
      <category term="Java" scheme="https://blog.rabears.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>关于Facebook 的 React 专利许可证</title>
    <link href="https://blog.rabears.com/2017/09/20/react-revocable-license/"/>
    <id>https://blog.rabears.com/2017/09/20/react-revocable-license/</id>
    <published>2017-09-20T02:33:22.000Z</published>
    <updated>2017-09-21T06:48:54.090Z</updated>
    
    <content type="html"><![CDATA[<p>随着Apache、百度、Wordpress都在和Facebook的React.js以及其专利许可证划清界限，似乎大家又在讨论Facebook的这个BSD+PATENT的许可证问题了。这让我想起了之前在Medium读过的一篇文章——《<a href="https://medium.com/@dwalsh.sdlr/react-facebook-and-the-revokable-patent-license-why-its-a-paper-25c40c50b562" target="_blank" rel="external">React, Facebook, and the Revocable Patent License, Why It’s a Paper</a>》，我觉得那篇文章写的不错，而且还是一个会编程的律师写的，所以有必要把这篇文章传播到中文社区这边来。注意，我不会全部翻译，我只是用我的语言来负责搬运内容和观点，我只想通过这篇文章让大家了解一下这个世界以及专利相关的知识，这样可以避免你看到某乎的“怎么看待XXX”这类的问题时人云亦云，能有自己的独立思考和自我判断。;-)<br><a href="https://github.com/facebook/react/blob/master/PATENTS" target="_blank" rel="external">React Additional Grant of Patent Rights Version 2</a><br><a id="more"></a></p><p>这篇文章的作者叫Dennis Walsh，他自称是亚历桑那和加利福尼亚州的律师，主要针对版权法和专利诉论的法律领域。但是这个律师不一样，他更很喜欢商业和软件多一些。现在他用React/GraphQL/Elixir在写一个汽车代理销售相关的软件，而且已经发布到第2版了。</p><p>首先，作者表明，专利法经常被人误解，因为其实充满了各种晦涩难懂的法律术语，所以，作者用个例子来讲述专利的一个原则 —— <strong>专利并不是授于让你制造或开发的权利，而是授予你可以排他的权利。（</strong>事实上似乎也是这样，申请专利很多时候都不是为了制作相关的产品，而是为了防止别人使用类似的技术制作相关的产品）</p><p>如果有公司X为铅笔申请了专利，而另一家公司Y为把用于铅笔的橡皮擦申请了专利。那么，公司X可以阻止公司Y来生产铅笔，而对带橡皮擦的铅笔没办法，但是公司Y的专利可以让公司X不能生产带有橡皮擦的铅笔。</p><p>所以，公司Y的橡皮擦专利又被广泛地叫作“<a href="https://definitions.uslegal.com/b/blocking-patent/" target="_blank" rel="external">Blocking Patent</a>”。公司Y不能说他发明了铅笔，因为这是公司X的专利，但是，他们可以让公司X无法对铅笔做出某些改进。</p><p>于是，因为这种 Blocking Patent 存在，对于开源的公司是不利的，因为根据上面的那个例子来说，开源公司就是公司X，他们做了一个基础的软件，而公司Y在上面做了些改进，并注册成了专利，从而导致开源的公司X无法对它基础开源软件作出被公司Y专利阻止的改进，开源的公司X希望能够自由地使用公司Y的橡皮擦专利，因为毕竟是它发明了铅笔并放弃了铅笔的专利。</p><p>于是就出来了“专利反击条款”（<a href="https://en.wikipedia.org/wiki/Software_patents_and_free_software#Patent_retaliation" target="_blank" rel="external">Patent Retaliation Clauses</a>）。一般来说有两种专利条款，一种是弱条款，一种是强条款。</p><p>Weak Patent Retaliation Clauses – 这种条款声明，如果许可证持有者用某个专利来打击许可证颁布者，那么专利就视为终止。用人话来表达就是，公司X做了一个开源铅笔，而公司Y注册了橡皮檫专利。此时，公司X做了一支带像皮擦的铅笔，而公司Y马上对公司X提起专利侵权诉讼。那么，公司Y就失去了对底层铅笔的专利控制。（正如前面所说的，公司Y的橡皮擦专利因为在起诉公司X的开源铅笔，而失去了对开源铅笔的专利排他权利）</p><p>Strong Patent Retailiation Clauses – 这种条款声明比“弱条款”要的更多。具体来说就是，任何专利声明终结许可证，而不管这个专利有没有和你基础的软件有关系。用人话来说就是，公司Y使用他们的热气球专利来起诉公司X，那么公司Y就失去了他们对铅笔的专利限制。</p><p>我个人理解起来，这两种条款看上去是防御性质的。</p><p>Facebook的React的Patent License如下：</p><blockquote><p>The license granted hereunder will terminate, automatically and without notice,if you (or any of your subsidiaries, corporate affiliates or agents) initiatedirectly or indirectly, or take a direct financial interest in, any Patent Assertion: (i) against Facebook or any of its subsidiaries or corporateaffiliates, (ii) against any party if such Patent Assertion arises in whole orin part from any software, technology, product or service of Facebook or any ofits subsidiaries or corporate affiliates, or (iii) against any party relating to the Software. Notwithstanding the foregoing, if Facebook or any of itssubsidiaries or corporate affiliates files a lawsuit alleging patentinfringement against you in the first instance, and you respond by filing apatent infringement counterclaim in that lawsuit against that party that isunrelated to the Software, the license granted hereunder will not terminateunder section (i) of this paragraph due to such counterclaim.</p></blockquote><p>这些条款中和基础软件没有任何关系，所以，<strong>这个条款是“强专利反击条款”</strong>。</p><p>在后面，本文的作者又解解释了，为什么React的“强专利反击条款”就跟没有似的。他在文中针对一些歇斯底里的言论，如：“Facebook不用害怕专利诉讼了，而且他可以随时偷袭你家的专利仓库”，也作出了一些解释来分析这个事。</p><p>Contractural Liability – 意思是说，专利方面的东西只会影响专利上的事，而不会影响和专利无关的事，React底层协议是BSD-3许可证还是会被保留。换句话说，React的“强专利反击条款”只生效于专利层面，而不会对非常专利的软件使用产生问题，如果和专利无关，React还是走BSD-3的许可协议。</p><p>Copyright Liability – 这个和Contractural Liablitity 一样。作者说，如果有人有特别的案例或是有说服力的论据来说明Facebook的这个条款会作用于非专利的地方，那么，请告诉他。</p><p>Patent Liability – 专利的责任和损害是两件事，非专业人士总是会把其搞混。</p><p>第一个问题是Liability， 要搞清这个事，得搞清“Patent’s Claims”，而不是这个技术的技术规格说明，技术规格说明和权力主张是两码事。作者说，现在的很多专利都是一些想法，很多投机份子随便一拍脑袋就发明出一个想法，然后就去注册专利了。但是可以被用来法律执行的只有“Patent’s Claims”（专利的权利主张），而不是那些想法。这些权利主张相当相当的晦涩难读，而且是会故意被模糊掉的，因为，当你清楚的定义了你的发明是什么，那么，就可以清楚的定义出来什么不是你的发明。比如：一个铅笔专利权利主张里说，“这一个用石墨和木头组合起来的写字工具”，那么，只要我不用木头和石墨来做组合，而是用塑料来做组合，那么我就不是专利侵权。所以，一般来说，专利主张是会更为通用一些，比如，“这是一个用于涂画表面的装置，其包括：与涂画端相连的握持端”。作者这里给了一个<a href="https://www.google.com/patents/US8046721" target="_blank" rel="external">苹果公司的滑动解锁专利</a>的示例。可以感受一下产品规格说明和专利权利主张完全是两码事。</p><p>专利这些事，在法律界里是非常非常困难作出评估的。所以，这个社会每年都会给律师们几十亿美金来一遍又一遍地回答这些问题，而且律师还经常回答错了。而对于美国的法律，对于专利诉讼会有一个叫<a href="https://en.wikipedia.org/wiki/Markman_hearing" target="_blank" rel="external">Markman hearing的审前听证会</a>（马克曼听证会），自从1996年美国最高法的“<a href="https://en.wikipedia.org/wiki/Markman_v._Westview_Instruments,_Inc." target="_blank" rel="external">马克曼诉威斯幽仪器公司案</a>”这个听证会就变成了一个惯例，美国联邦法院用这个听证会来向决定专利权利主张的解释，而且，上诉法院还经常性的推翻审判法院的裁决。（对于美国法律来说，一般是法官认证法律，陪审团认定事实，然而，对于专利而言，1996年的那个案件认为专利术语是一个需要法官决定的法律问题，而不是陪审团决定的事实问题。关于马克曼听证会的事，可以参看本文未尾的附录）</p><p>所以，要决定Facebook的专利责任，我们需要评估Facebook的专利及其权利主张，而不是技术规格说明。具体来说，要明确Facebook对于React这个底层技术的专利权利主张是什么？但是作者搜了一下，发现什么也没有找到。也就是说，对于USPTO（美国专利商标局）或法院来说，他们没办法对Facebook的这样没有为React申请专利的方式来执行任何和专利的诉讼，也就是说，Facebook的这个React License的条款，美国政府是无法在法律上支持的。</p><p>第二个问题是专利损害。就算是Facebook可以评估出来一个合法可执行的专利来保护React，对于专利损害也是很有问题的。作者说他到目前还没有发现一个开源软件被专利侵权的事，就算有这样的案例，也不会是这里说的这个事。作者觉得在这个事上操作起来就是一个笑话。</p><p>另外，作者认为，React 专利许可证这个事就是个纸老虎。因为，一方面，这个专利不像电信通讯里的那些专利，你拿不掉。作者认为要从你的代码中把React去掉虽然难，但是也不是什么很难的事，另外，要打这样的专利官司，一般来说，在美国至少要花100-200万美金的费用才能发起诉讼，而要胜诉则需要需要200多万到2000万美金的费用，你觉得你要花多钱才能把React从你的代码库中剔除？肯定比这钱少。</p><p>作者还认为，Facebook玩这个事虽然出发点不错，但是感觉并不聪明，从目前的情况看下来，就像他想咬你一口，但却没有牙。</p><p>后面，作者还说了一下，转成别的框架会不会有问题？比如：你用Preact/Vue或是你自研的东西？作者说，未必，如果Facebook真的为React注册了专利，比如：React里的组件技术、虚拟DOM渲染技术等等。那么，你用Preact/Vue或是带这样技术的自研的框架，那么，从你使用的第一天就在侵犯Facebook的专利权了。然而，使用React反而不会有这么大的风险，因为Facebook让你免费的用React。作者说，用别的框架的法律风险比用其它替代品的风险更高。</p><p>后面，作者也更新了一篇文章 《<a href="https://medium.com/@dwalsh.sdlr/using-graphql-why-facebook-now-owns-you-3182751028c9" target="_blank" rel="external">Using GraphQL? Why Facebook Now Owns You</a>》，意思是，用React可能还好，但是用GraphQL就有问题了。因为找到了GraphQL的专利—— <a href="https://patents.google.com/patent/US9646028" target="_blank" rel="external">“Graph Query Logic”</a>。</p><p>后来我查了一下，我发现，React也有个相关的专利—— “<a href="https://patents.google.com/patent/US9003278" target="_blank" rel="external">Efficient event delegation in browser scripts</a> ”，看上去和虚拟DOM渲染有关。Holy Shit!</p><p>好了，用还是不用React我也不知道，总之，这个世界比较复杂，我只是想借这篇文章来学习一下法律上的相关东西，欢迎听到大家的观点。</p><p>最后，请允许我调侃一下来结束本文——“不用担心React的许可证问题，因为前端不是一年半就用新的框架重写一次么？”哈哈。</p><h4 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h4><h5 id="马克曼听证会-–-Markman-Hearing"><a href="#马克曼听证会-–-Markman-Hearing" class="headerlink" title="马克曼听证会 – Markman Hearing"></a>马克曼听证会 – Markman Hearing</h5><p>马克曼听证会的一些背景知识，下面的文字来源于《<a href="http://www.sipo.gov.cn/sipo2013/mtjj/2013/201303/t20130320_788543.html" target="_blank" rel="external">“马克曼听证”制度的由来及启示</a>》</p><p>与美国专利诉讼的悠长历史相比，1996年才经美国最高法院确立的“马克曼听证”（Markman Hearing，也称为Claim Construction，即权利要求书的解释）无疑是一项年轻的制度。但由于几乎所有的专利侵权诉讼中都会遇到涉案专利权利要求书的解释这一核心问题，且因“马克曼听证”结果往往清楚地预示了案件结果，经“马克曼听证”获得有利结论的一方一旦据此向法庭提起不审即判的动议，专利侵权诉讼往往可就此快速了结，因此该制度的确立成为美国专利诉讼历史上的一件大事。</p><p>“马克曼听证”制度的由来</p><p>“马克曼听证”制度确立之前，在专利侵权诉讼中的权利要求书解释，通常交由陪审团在对案件事实进行裁决时一并做出，且并不会在诉讼文件上单独就陪审团这一问题的判断进行记录。1991年，马克曼（Markman）先生因认为其拥有的专利号为RE33054的“干洗衣物贮存及追踪控制装置”专利权被Westview公司所侵犯，遂向宾夕法尼亚州东区联邦地方法院提起了专利侵权诉讼。</p><p>该专利是用扫描的方式，将客户的衣物编号扫描后输入电脑中做分类标示，并在衣物干洗过程中追踪衣物位置，干洗完成后自动将衣物放回客户固定的存贮位置。被告的产品则是同时运用扫描器和电脑两种方式，将客户干洗衣物的资料存入电脑并显示费用、日期等相关信息。本案陪审团的裁决认为被告装置构成对原告专利权利的侵犯，但该地方法院认为系争专利与被告装置在功能实施上并不一致，遂推翻陪审团的裁决，判决被告不构成侵权。</p><p>马克曼不服，于1995年向联邦上诉法院提起上诉，但其上诉理由仅为联邦地方法院错误地解释了陪审团关于专利权利要求书解释中某个词语的涵义。联邦上诉法院在审理该案时，将案件的核心问题定为两个：一是原告对于请求项解释有无权利请求陪审团裁决;二是联邦地方法院是否正确地解释了“Inventory”一词。该院多数法官经审理后认为，权利要求书范围的解释与确定，属于法律问题而非事实问题，因而属于法院权限，而不应交由陪审团决定，且此前将此问题交由陪审团确定并不妥当。同时，由于认为原告专利与被告装置存在实质功能上的差异，联邦上诉法院亦不认为被告构成专利侵权。少数持不同意见的该院法官主要是质疑这一结论违反了美国第七宪法修正案（即所有根据美国法律进行的普通法诉讼，只要争议金额超过20美元，即有要求陪审团审判的权利）。</p><p>马克曼不服，向最高法院提出上诉。1996年4月23日，美国最高法院就马克曼诉Westview器械公司案（Markman v. Westview Instruments, Inc. 517 U.S. 370 （1996））做出终审裁决，裁决认定：权利要求书的解释是联邦地区法院法官应当处理的法律问题，而不是应当由陪审团来认定的事实问题，尽管在解释权利要求书的过程中可能会包含一些对于事实问题的解释，且这样做并不违反第七修正案赋予给陪审团的权利。这一裁决标志着“马克曼听证”制度的正式确立。</p><p>“马克曼听证”制度的不足</p><p>该案判决是美国专利诉讼史上的一个重大转折。“马克曼听证”成为法官专门用于解释专利权利要求的一个经常性听证程序，用以解决专利侵权诉讼的核心问题。由于该听证并非普遍适用，因此，十几年来，联邦民事诉讼规则并未正式对其有任何规定，而是给予法院绝对的自由裁量权。但是，何时可以进行“马克曼听证”?如何进行?是否有必要进行?类似问题在一定程度上困扰了审理专利侵权案件较多的法院。</p><p>2001年，加州北区联邦地区法院率先制定了供本法院使用的专利审判专属规则（Patent Local Rules），其中第四部分即为权利要求书的解释程序（Claim Construction Proceddings），对“马克曼听证”的时间、流程、限制及当事人的义务均进行了规定。此后，各州纷纷效仿。目前，乔治亚州北区联邦法院、得克萨斯州东区联邦法院、得克萨斯州南区联邦法院、宾夕法尼亚州西区联邦法院等都制订了书面的“马克曼听证”程序指南。近年来，不断有新的案例在解释与细化着“马克曼听证”，如2006年的Wilson Sporting Goods Co.诉Hillerich &amp; Bradsby Co.案，2005年的Phillips诉AWH Corp.案，2008年的Howmedica Osteonics Corp.诉Wright Medical Technology, Inc.案，这些司法实践大大拓展与丰富了“马克曼听证”使用的实体和程序规则，使之日渐成为美国专利诉讼中一个复杂、完备的司法程序。以至于竟然有人开发了模拟“马克曼听证”程序，只要你愿意，可以下载并训练，以熟悉和确保有真正的权利要求书解释时不会出现不利于自己的问题。</p><p>但是，该听证带来的问题也逐渐受到重视。有人质疑说该程序导致专利诉讼费用增加，因为“马克曼听证”通常会单独进行，且程序复杂，因此导致当事人花费大量的时间与精力，更为重要的是，由于40%至60%的联邦地区法院案件会在联邦巡回上诉法院被推翻，因此，花费巨大的“马克曼听证”似乎价值有限。同时，权利要求书的解释要求是不多不少，忠实于技术发明思想与发明事实，但由于地区法院分散，法官的相关技术知识不十分专业，将权利要求书解释这样的问题交给他们，难免会带来一些无法克服的问题。</p><p>“马克曼听证”制度的启示</p><p>我国民事诉讼中并无陪审团制度，案件的事实问题与法律问题均由法官审理与确定。在专利侵权诉讼中，对于案件中涉及到的技术问题可以通过专家鉴定等方式解决，但并不因此免除法官审理案件的义务，即法律问题的判断归于法官，事实的法律属性判断仍然归于法官。同时，权利要求书的解释在我国的专利侵权诉讼中并不是一个单独的程序，而是合并在案件审理过程中。因此，仅就我国的司法审判而言，“马克曼听证”制度并无直接的借鉴意义。</p><p>但是，对于那些已经走出和正在走出国门的企业来说，了解与掌握这一重要的专利诉讼程序却是极其重要的。通领科技集团的积极尝试充分证明了这一点，而且随着这一程序的不断成熟，美国国际贸易法院（ITC）也开始在审理时适用“马克曼听证”制度。所以，知道“马克曼听证”意味着什么，确保所提交的用于解释权利要求的文件确实充分，学会利用“马克曼听证”，无论是对于破解美国的专利诉讼威胁，还是为未来准备有效的法律武器，无疑都非常重要。（知识产权报　作者　魏玮）</p><blockquote><p>本文转载自 <a href="https://coolshell.cn/articles/18140.html" target="_blank" rel="external">CoolShell</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着Apache、百度、Wordpress都在和Facebook的React.js以及其专利许可证划清界限，似乎大家又在讨论Facebook的这个BSD+PATENT的许可证问题了。这让我想起了之前在Medium读过的一篇文章——《&lt;a href=&quot;https://medium.com/@dwalsh.sdlr/react-facebook-and-the-revokable-patent-license-why-its-a-paper-25c40c50b562&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React, Facebook, and the Revocable Patent License, Why It’s a Paper&lt;/a&gt;》，我觉得那篇文章写的不错，而且还是一个会编程的律师写的，所以有必要把这篇文章传播到中文社区这边来。注意，我不会全部翻译，我只是用我的语言来负责搬运内容和观点，我只想通过这篇文章让大家了解一下这个世界以及专利相关的知识，这样可以避免你看到某乎的“怎么看待XXX”这类的问题时人云亦云，能有自己的独立思考和自我判断。;-)&lt;br&gt;&lt;a href=&quot;https://github.com/facebook/react/blob/master/PATENTS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;React Additional Grant of Patent Rights Version 2&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Tech" scheme="https://blog.rabears.com/categories/Tech/"/>
    
      <category term="ReactJs" scheme="https://blog.rabears.com/categories/Tech/ReactJs/"/>
    
    
      <category term="react" scheme="https://blog.rabears.com/tags/react/"/>
    
      <category term="license" scheme="https://blog.rabears.com/tags/license/"/>
    
      <category term="facebook" scheme="https://blog.rabears.com/tags/facebook/"/>
    
  </entry>
  
  <entry>
    <title>Stephen Hawking launches Centre for the Future of Intelligence</title>
    <link href="https://blog.rabears.com/2016/10/26/stephen-hawking/"/>
    <id>https://blog.rabears.com/2016/10/26/stephen-hawking/</id>
    <published>2016-10-25T17:55:37.000Z</published>
    <updated>2017-09-21T08:14:47.262Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Alongside the benefits, AI will also bring dangers, like powerful autonomous weapons, or new ways for the few to oppress the many.</p><footer><strong>Stephen Hawking</strong><cite><a href="http://www.cam.ac.uk/research/news/the-best-or-worst-thing-to-happen-to-humanity-stephen-hawking-launches-centre-for-the-future-of" target="_blank" rel="external">www.cam.ac.uk</a></cite></footer></blockquote><p>Artificial intelligence has the power to eradicate poverty and disease or hasten the end of human civilisation as we know it – according to a speech delivered by Professor Stephen Hawking this evening.</p><blockquote class="pullquote right"><p>Alongside the benefits, AI will also bring dangers, like powerful autonomous weapons, or new ways for the few to oppress the many.</p></blockquote><p>“Success in creating AI could be the biggest event in the history of our civilisation,” said Professor Hawking. “But it could also be the last – unless we learn how to avoid the risks. Alongside the benefits, AI will also bring dangers like powerful autonomous weapons or new ways for the few to oppress the many.</p><p>“We cannot predict what we might achieve when our own minds are amplified by AI. Perhaps with the tools of this new technological revolution, we will be able to undo some of the damage done to the natural world by the last one – industrialisation.”</p><p>The Centre for the Future of Intelligence will initially focus on seven distinct projects in the first three-year phase of its work, reaching out to brilliant researchers and connecting them and their ideas to the challenges of making the best of AI. Among the initial research topics are: ‘Science, value and the future of intelligence’; ‘Policy and responsible innovation’; ‘Autonomous weapons – prospects for regulation’ and ‘Trust and transparency’.</p><a id="more"></a><p>The Academic Director of the Centre, and Bertrand Russell Professor of Philosophy at Cambridge, Huw Price, said: “The creation of machine intelligence is likely to be a once-in-a-planet’s-lifetime event. It is a future we humans face together. Our aim is to build a broad community with the expertise and sense of common purpose to make this future the best it can be.”</p><p>Many researchers now take seriously the possibility that intelligence equal to our own will be created in computers within this century. Freed of biological constraints, such as limited memory and slow biochemical processing speeds, machines may eventually become more intelligent than we are – with profound implications for us all.</p><p>AI pioneer Professor Maggie Boden (University of Sussex) sits on the Centre’s advisory board and spoke at this evening’s launch. She said: “AI is hugely exciting. Its practical applications can help us to tackle important social problems, as well as easing many tasks in everyday life. And it has advanced the sciences of mind and life in fundamental ways. But it has limitations, which present grave dangers given uncritical use. CFI aims to pre-empt these dangers, by guiding AI development in human-friendly ways.”</p><p>“Recent landmarks such as self-driving cars or a computer game winning at the game of Go, are signs of what’s to come,” added Professor Hawking. “The rise of powerful AI will either be the best or the worst thing ever to happen to humanity. We do not yet know which. The research done by this centre is crucial to the future of our civilisation and of our species.”</p><p>Transcript of Professor Hawking’s speech at the launch of the Leverhulme Centre for the Future of Intelligence, October 19, 2016</p><p>“It is a great pleasure to be here today to open this new Centre.  We spend a great deal of time studying history, which, let’s face it, is mostly the history of stupidity.  So it is a welcome change that people are studying instead the future of intelligence.</p><p>Intelligence is central to what it means to be human.  Everything that our civilisation has achieved, is a product of human intelligence, from learning to master fire, to learning to grow food, to understanding the cosmos. </p><p>I believe there is no deep difference between what can be achieved by a biological brain and what can be achieved by a computer.  It therefore follows that computers can, in theory, emulate human intelligence — and exceed it.</p><p>Artificial intelligence research is now progressing rapidly.  Recent landmarks such as self-driving cars, or a computer winning at the game of Go, are signs of what is to come.  Enormous levels of investment are pouring into this technology.  The achievements we have seen so far will surely pale against what the coming decades will bring.</p><p>The potential benefits of creating intelligence are huge.  We cannot predict what we might achieve, when our own minds are amplified by AI.  Perhaps with the tools of this new technological revolution, we will be able to undo some of the damage done to the natural world by the last one — industrialisation.  And surely we will aim to finally eradicate disease and poverty.  Every aspect of our lives will be transformed.  In short, success in creating AI, could be the biggest event in the history of our civilisation.</p><p>But it could also be the last, unless we learn how to avoid the risks.  Alongside the benefits, AI will also bring dangers, like powerful autonomous weapons, or new ways for the few to oppress the many.   It will bring great disruption to our economy.  And in the future, AI could develop a will of its own — a will that is in conflict with ours.</p><p>In short, the rise of powerful AI will be either the best, or the worst thing, ever to happen to humanity.  We do not yet know which.  That is why in 2014, I and a few others called for more research to be done in this area.  I am very glad that someone was listening to me! </p><p>The research done by this centre is crucial to the future of our civilisation and of our species.  I wish you the best of luck!”</p><h2 id="以下为霍金演讲全文的中文版："><a href="#以下为霍金演讲全文的中文版：" class="headerlink" title="以下为霍金演讲全文的中文版："></a>以下为霍金演讲全文的中文版：</h2><p>今天，非常荣幸来来这里参加新中心的开启仪式。</p><p>我们花了大把的时间研究历史，让我们来直面这部历史，这近乎是部愚昧的历史。所以，人们现在转而研究未来的智慧了，这种转变将备受欢迎。</p><p>对人类而言，智慧是存在的核心所在。一切文明，皆是智慧的产物。从学会用火，到学会耕种，到理解宇宙。</p><p>我相信，生物的大脑所获得的智慧，与计算机所能获得的智慧，并无本质区别。因此，理论上，计算机可以模拟人类智慧，并超越它。</p><p>现在人工智能的研究日新月异。最新的标志性成果，比如自动驾驶汽车、阿尔法狗战胜围棋世界高手，预示着即将到来新的时代。大小额投资纷纷倾注于这个领域。我们迄今为止所见到的成就，在新时代面前，即将黯然失色。</p><p>人工智能的带来的益处是巨大的。我们无法预测，当人类心智被人工智能扩展时，我们会取得哪些成就。也许，有了这个技术革命的新工具，我们能够有能力弥补一些由工业化对自然界造成的破坏。当然，我们希望能够最终消灭疾病和贫穷。我们生活的方方面面都会被变化。简而言之，人工智能的成功创造，可以说是人类文明史上最大的事件。</p><p>但是，它也可能是人类文明史的终结，除非我们学会如何避免它所带来的危害。人工智能在带来益处的同时，也带来危险，比如强大的自动武器，或少数人欺压多数人的新方法。它也可能给我们的经济带来巨大的破坏。将来，人工智能可能会发展出来它自己的意志——一个与人类相冲突的意志。</p><p>总之，人工智能的强力崛起，在人类历史上，可能是最好的，也可能是最糟糕的。而我们尚且不知道会是哪一个。这是为什么在2014年，我和其它几个人呼吁在这个领域进行更多研究。令我欣慰的是，有人听到了我的呼声！</p><p>这个中心的研究，对我们人类文明的将来，对我们人类这个物种而言，都是极其关键的。祝大家好运！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;&lt;p&gt;Alongside the benefits, AI will also bring dangers, like powerful autonomous weapons, or new ways for the few to oppress the many.&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Stephen Hawking&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;http://www.cam.ac.uk/research/news/the-best-or-worst-thing-to-happen-to-humanity-stephen-hawking-launches-centre-for-the-future-of&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;www.cam.ac.uk&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;p&gt;Artificial intelligence has the power to eradicate poverty and disease or hasten the end of human civilisation as we know it – according to a speech delivered by Professor Stephen Hawking this evening.&lt;/p&gt;
&lt;blockquote class=&quot;pullquote right&quot;&gt;&lt;p&gt;Alongside the benefits, AI will also bring dangers, like powerful autonomous weapons, or new ways for the few to oppress the many.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;“Success in creating AI could be the biggest event in the history of our civilisation,” said Professor Hawking. “But it could also be the last – unless we learn how to avoid the risks. Alongside the benefits, AI will also bring dangers like powerful autonomous weapons or new ways for the few to oppress the many.&lt;/p&gt;
&lt;p&gt;“We cannot predict what we might achieve when our own minds are amplified by AI. Perhaps with the tools of this new technological revolution, we will be able to undo some of the damage done to the natural world by the last one – industrialisation.”&lt;/p&gt;
&lt;p&gt;The Centre for the Future of Intelligence will initially focus on seven distinct projects in the first three-year phase of its work, reaching out to brilliant researchers and connecting them and their ideas to the challenges of making the best of AI. Among the initial research topics are: ‘Science, value and the future of intelligence’; ‘Policy and responsible innovation’; ‘Autonomous weapons – prospects for regulation’ and ‘Trust and transparency’.&lt;/p&gt;
    
    </summary>
    
      <category term="Translation" scheme="https://blog.rabears.com/categories/Translation/"/>
    
      <category term="AI" scheme="https://blog.rabears.com/categories/Translation/AI/"/>
    
    
      <category term="Stephen Hawking" scheme="https://blog.rabears.com/tags/Stephen-Hawking/"/>
    
      <category term="霍金" scheme="https://blog.rabears.com/tags/%E9%9C%8D%E9%87%91/"/>
    
      <category term="AI" scheme="https://blog.rabears.com/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>列式存储(Column Based Storage)</title>
    <link href="https://blog.rabears.com/2014/06/27/column-based-storage/"/>
    <id>https://blog.rabears.com/2014/06/27/column-based-storage/</id>
    <published>2014-06-27T08:13:41.000Z</published>
    <updated>2017-09-27T09:09:53.944Z</updated>
    
    <content type="html"><![CDATA[<p>目前大数据存储有两种方案可供选择：行存储和列存储。<br>业界对两种存储方案有很多争持，集中焦点是:谁能够更有效地处理海量数据，且兼顾安全、可靠、完整性。从目前发展情况看，关系数据库已经不适应这种巨大的存储量和计算要求，基本是淘汰出局。在已知的几种大数据处理软件中，Hadoop的HBase采用列存储，MongoDB是文档型的行存储，Lexst是二进制型的行存储。在这里，我不讨论这些软件的技术和优缺点，只围绕机械磁盘的物理特质，分析行存储和列存储的存储特点，以及由此产生的一些问题和解决办法。<br><a id="more"></a></p><h2 id="结构布局"><a href="#结构布局" class="headerlink" title="结构布局"></a>结构布局</h2><p>行存储数据排列<br><img src="/2014/06/27/column-based-storage/rowbased.png" alt="行存储数据排列" title="行存储数据排列"><br>列存储数据排列<br><img src="/2014/06/27/column-based-storage/columnbased.png" alt="列存储数据排列" title="列存储数据排列"></p><p>表格的灰色背景部分表示行列结构，白色背景部分表示数据的物理分布，两种存储的数据都是从上至下，从左向右的排列。行是列的组合，行存储以一行记录为单位，列存储以列数据集合单位，或称列族（column family）。行存储的读写过程是一致的，都是从第一列开始，到最后一列结束。列存储的读取是列数据集中的一段或者全部数据，写入时，一行记录被拆分为多列，每一列数据追加到对应列的末尾处。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>从行存储转换到行存储, 进行数据压缩。<br><img src="/2014/06/27/column-based-storage/data.png" alt="data.png" title=""><br>找到所有名字叫Millter且货品为Refrigerator的index。<br><img src="/2014/06/27/column-based-storage/search.png" alt="search.png" title=""></p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><p>从上面表格可以看出，行存储的写入是一次完成。如果这种写入建立在操作系统的文件系统上，可以保证写入过程的成功或者失败，数据的完整性因此可以确定。列存储由于需要把一行记录拆分成单列保存，写入次数明显比行存储多，再加上磁头需要在盘片上移动和定位花费的时间，实际时间消耗会更大。所以，行存储在写入上占有很大的优势。</p><p>还有数据修改,这实际也是一次写入过程。不同的是，数据修改是对磁盘上的记录做删除标记。行存储是在指定位置写入一次，列存储是将磁盘定位到多个列上分别写入，这个过程仍是行存储的列数倍。所以，数据修改也是以行存储占优。 数据读取时，行存储通常将一行数据完全读出，如果只需要其中几列数据的情况，就会存在冗余列，出于缩短处理时间的考量，消除冗余列的过程通常是在内存中进行的。列存储每次读取的数据是集合的一段或者全部，如果读取多列时，就需要移动磁头，再次定位到下一列的位置继续读取。 再谈两种存储的数据分布。由于列存储的每一列数据类型是同质的，不存在二义性问题。比如说某列数据类型为整型（int），那么它的数据集合一定是整型数据。这种情况使数据解析变得十分容易。相比之下，行存储则要复杂得多，因为在一行记录中保存了多种类型的数据，数据解析需要在多种数据类型之间频繁转换，这个操作很消耗CPU，增加了解析的时间。所以，列存储的解析过程更有利于分析大数据。</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>在比较了行式数据库与列式数据库之后，我们更关心的是如何根据业务场景需要选择对应的数据库系统。<br>行式更适合OLTP，比如传统的基于增删改查操作的应用。列式更适合OLAP，非常适合于在数据仓库领域发挥作用，比如数据分析、海量存储和商业智能;涉及不经常更新的数据。<br>由于设计上的不同，列式数据库在并行查询处理和压缩上更有优势。而且数据是以列为单元存储，完全不用考虑数据建模或者说建模更简单了。要查询计算哪些列上的数据，直接读取列就行。<br>最后我们需要务实的指出，没有万能的数据库，列式数据库也并非万能，只不过给DBA提供了更多的选择，DBA需根据自己的应用场景自行选择。</p><table><thead><tr><th></th><th>行式存储</th><th>列式存储</th></tr></thead><tbody><tr><td>优点</td><td>Ø 数据被保存在一起<br>Ø INSERT/UPDATE容易</td><td>Ø 查询时只有涉及到的列会被读取<br>Ø 投影(projection)很高效<br>Ø 任何列都能作为索引</td></tr><tr><td>缺点</td><td>Ø 选择(Selection)时即使只涉及某几列，所有数据也都会被读取</td><td>Ø 选择完成时，被选择的列要重新组装<br>Ø INSERT/UPDATE比较麻烦</td></tr></tbody></table><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>显而易见，两种存储格式都有各自的优缺点：行存储的写入是一次性完成，消耗的时间比列存储少，并且能够保证数据的完整性，缺点是数据读取过程中会产生冗余数据，如果只有少量数据，此影响可以忽略；数量大可能会影响到数据的处理效率。列存储在写入效率、保证数据完整性上都不如行存储，它的优势是在读取过程，不会产生冗余数据，这对数据完整性要求不高的大数据处理领域，比如互联网，犹为重要。</p><p>改进集中在两方面：行存储读取过程中避免产生冗余数据，列存储提高读写效率。</p><p>如何改进它们的缺点，并保证优点呢？</p><p>行存储的改进：减少冗余数据首先是用户在定义数据时避免冗余列的产生；其次是优化数据存储记录结构，保证从磁盘读出的数据进入内存后，能够被快速分解，消除冗余列。要知道，目前市场上即使最低端CPU和内存的速度也比机械磁盘快上100-1000倍。如果用上高端的硬件配置，这个处理过程还要更快。</p><p>列存储的两点改进：1.在计算机上安装多块硬盘，以多线程并行的方式读写它们。多块硬盘并行工作可以减少磁盘读写竞用，这种方式对提高处理效率优势十分明显。缺点是需要更多的硬盘，这会增加投入成本，在大规模数据处理应用中是不小的数目，运营商需要认真考虑这个问题。2.对写过程中的数据完整性问题，可考虑在写入过程中加入类似关系数据库的“回滚”机制，当某一列发生写入失败时，此前写入的数据全部失效，同时加入散列码校验，进一步保证数据完整性。</p><p>这两种存储方案还有一个共同改进的地方：频繁的小量的数据写入对磁盘影响很大，更好的解决办法是将数据在内存中暂时保存并整理，达到一定数量后，一次性写入磁盘，这样消耗时间更少一些。目前机械磁盘的写入速度在20M-50M/秒之间，能够以批量的方式写入磁盘，效果也是不错的</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>两种存储格式各自的特性都决定了它们不可能是完美的解决方案。 如果首要考虑是数据的完整性和可靠性，那么行存储是不二选择，列存储只有在增加磁盘并改进软件设计后才能接近这样的目标。如果以保存数据为主，行存储的写入性能比列存储高很多。在需要频繁读取单列集合数据的应用中，列存储是最合适的。如果每次读取多列，两个方案可酌情选择：采用行存储时，设计中应考虑减少或避免冗余列；若采用列存储方案，为保证读写入效率，每列数据尽可能分别保存到不同的磁盘上，多个线程并行读写各自的数据，这样避免了磁盘竞用的同时也提高了处理效率。 无论选择哪种方案，将同内容数据聚凑在一起都是必须的，这是减少磁头在磁盘上的移动，提高数据读取时间的有效办法。<br><img src="/2014/06/27/column-based-storage/compare.png" alt="compare.png" title=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前大数据存储有两种方案可供选择：行存储和列存储。&lt;br&gt;业界对两种存储方案有很多争持，集中焦点是:谁能够更有效地处理海量数据，且兼顾安全、可靠、完整性。从目前发展情况看，关系数据库已经不适应这种巨大的存储量和计算要求，基本是淘汰出局。在已知的几种大数据处理软件中，Hadoop的HBase采用列存储，MongoDB是文档型的行存储，Lexst是二进制型的行存储。在这里，我不讨论这些软件的技术和优缺点，只围绕机械磁盘的物理特质，分析行存储和列存储的存储特点，以及由此产生的一些问题和解决办法。&lt;br&gt;
    
    </summary>
    
      <category term="Tech" scheme="https://blog.rabears.com/categories/Tech/"/>
    
      <category term="Big Data" scheme="https://blog.rabears.com/categories/Tech/Big-Data/"/>
    
    
      <category term="列存储" scheme="https://blog.rabears.com/tags/%E5%88%97%E5%AD%98%E5%82%A8/"/>
    
      <category term="数据压缩" scheme="https://blog.rabears.com/tags/%E6%95%B0%E6%8D%AE%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="Column Based Storage" scheme="https://blog.rabears.com/tags/Column-Based-Storage/"/>
    
  </entry>
  
  <entry>
    <title>待业青年</title>
    <link href="https://blog.rabears.com/2010/04/28/unemployed-guys/"/>
    <id>https://blog.rabears.com/2010/04/28/unemployed-guys/</id>
    <published>2010-04-28T11:33:38.000Z</published>
    <updated>2017-09-21T06:48:54.077Z</updated>
    
    <content type="html"><![CDATA[<p>在待业的这些日子里 看了红透网络的《待业青年》<br>简介是这样的：<br><blockquote class="pullquote"><p>这样的一群年轻人，他们才华横溢，他们生不逢时，他们崇尚艺术，他们叛逆，他们无助，他们被认为是社会的渣滓，而他们自命不凡，他们有情有义，他们 有时自甘堕落，他们有时愤世嫉俗，他们有时终日买醉，他们有时迷茫不已……</p></blockquote><br>——谨以此片献给我们逝去的青春 特别是那些不喜欢上学的孩子<br><a id="more"></a><br>好吧 也许只是做自己喜欢的事 结果被冠名叛逆<br><img src="/2010/04/28/unemployed-guys/unemployeed.jpg" alt="待业青年" title="待业青年"></p><p>我一个人在这里，不是因为不想被任何人打扰，而是不希望打扰任何人。<br>拿着文凭，不一定吃上饭；拿不到这个，肯定吃不到饭。<br>我现在的理想是搞清楚我的理想是什么。<br>现在在咱们国家学法律，就好像在津巴布韦学经济一样。<br>在进学校之前，每个人都不一样；进学校之后，每个人都一样。这是你个人的问题，你的能力不如老师，你被老师压制，最后你只能被老师教育得同化。<br>如果你没有独立经济能力，如果还在找家庭要钱，那么永远别叛逆。谁给你钱，谁就是你爷。<br>老师瞧不起我，家里看不起我，但我不能放弃自己。从此我就有了报复的心态，我要让他们统统大跌眼镜，让他们知道他们错了。<br>他们不理解，我也不需要他们理解。<br>在大学读书，尤其是文科科目，我很讨厌一点。就是老师学生都知道书上写的是谎话，但在考试时，必须把这谎话写上去才是正确的，才是能得分的。<br>那些老师重视的只是学生的分，以及学生家长在哪个职位上工作。<br>我只是选择我适合干的事情，我只是没有按照你们的意思做。结果被社会统称为——叛逆。<br>很可惜，你长大了，你没有勇气改变了。<br>让普通人二十多岁才应该明白的事情，让我们十几岁就明白，这种心理落差，你受得了么？<br>永远不要把爱好当做职业，如果你不够坚强，你会连这些爱好都失去。<br>只是多年以后，当我回忆起往事，记得年轻的时候，曾经做过我真正想做的事情，够了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在待业的这些日子里 看了红透网络的《待业青年》&lt;br&gt;简介是这样的：&lt;br&gt;&lt;blockquote class=&quot;pullquote&quot;&gt;&lt;p&gt;这样的一群年轻人，他们才华横溢，他们生不逢时，他们崇尚艺术，他们叛逆，他们无助，他们被认为是社会的渣滓，而他们自命不凡，他们有情有义，他们 有时自甘堕落，他们有时愤世嫉俗，他们有时终日买醉，他们有时迷茫不已……&lt;/p&gt;
&lt;/blockquote&gt;&lt;br&gt;——谨以此片献给我们逝去的青春 特别是那些不喜欢上学的孩子&lt;br&gt;
    
    </summary>
    
      <category term="Caprices" scheme="https://blog.rabears.com/categories/Caprices/"/>
    
    
      <category term="待业青年" scheme="https://blog.rabears.com/tags/%E5%BE%85%E4%B8%9A%E9%9D%92%E5%B9%B4/"/>
    
  </entry>
  
</feed>
